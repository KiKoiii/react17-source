{
    "sourceFile": "src/source/react-dom.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1667363253637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1667363638011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n function render(VDOM, container){\r\n     let DOM = createDOM(VDOM)\r\n+    console.log(DOM);\r\n     container.appendChild(DOM)\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667364052173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n+\r\n+//初始化\r\n function render(VDOM, container){\r\n     let DOM = createDOM(VDOM)\r\n     console.log(DOM);\r\n+    //根据虚拟DOM生成真实DOM\r\n     container.appendChild(DOM)\r\n }\r\n \r\n \r\n@@ -14,9 +17,9 @@\n     let {type, props} = VDOM\r\n \r\n     let DOM =null\r\n     \r\n-    if(typeof type === \"function\"){          //新增部分\r\n+    if(typeof type === \"function\"){          \r\n         if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n             return handleClassComponent(VDOM)\r\n         }\r\n         return handleFunctionComponent(VDOM)\r\n"
                },
                {
                    "date": 1667365766424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n //初始化\r\n function render(VDOM, container){\r\n     let DOM = createDOM(VDOM)\r\n     console.log(DOM);\r\n"
                },
                {
                    "date": 1667365806507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         return handleFunctionComponent(VDOM)\r\n     }else{\r\n         DOM = document.createElement(type)\r\n     } \r\n-    \r\n+    //更新\r\n     updateProps(DOM, null, props)\r\n \r\n     let {children} = props\r\n     if(children){\r\n@@ -50,9 +50,9 @@\n     return createDOM(realVDOM)\r\n }\r\n \r\n \r\n-function updateProps(DOM, oldProps, newProps){     //props:{children, className, style, onXXX}\r\n+function updateProps(DOM, oldProps, newProps){  //props:{children, className, style, onXXX}\r\n     if(newProps){\r\n         for(let key in newProps){\r\n             if(key === \"children\"){\r\n                 continue\r\n"
                },
                {
                    "date": 1667367202993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n //初始化\r\n-function render(VDOM, container){\r\n-    let DOM = createDOM(VDOM)\r\n-    console.log(DOM);\r\n+function render(vNode, container){\r\n+    let newDom = createDOM(vNode)\r\n+    console.log(newDom  );\r\n     //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(DOM)\r\n+    container.appendChild(newDom )\r\n }\r\n \r\n \r\n-function createDOM(VDOM){\r\n+function createDOM(vNode){\r\n \r\n-    if(Object(VDOM) !== VDOM){\r\n-        return document.createTextNode(VDOM)\r\n+    if(Object(vNode) !== vNode){\r\n+        return document.createTextNode(vNode)\r\n     }\r\n \r\n-    let {type, props} = VDOM\r\n+    let {type, props} = vNode\r\n \r\n     let DOM =null\r\n     \r\n     if(typeof type === \"function\"){          \r\n         if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n-            return handleClassComponent(VDOM)\r\n+            return handleClassComponent(vNode)\r\n         }\r\n-        return handleFunctionComponent(VDOM)\r\n+        return handleFunctionComponent(vNode)\r\n     }else{\r\n         DOM = document.createElement(type)\r\n     } \r\n     //更新\r\n@@ -35,20 +35,20 @@\n \r\n     return DOM\r\n }\r\n \r\n-function handleClassComponent(VDOM){     //对于类式组件\r\n-    let {type, props} = VDOM\r\n+function handleClassComponent(vNode){     //对于类式组件\r\n+    let {type, props} = vNode\r\n     let classInstance = new type(props)\r\n-    let realVDOM = classInstance.render()    //render()的返回值才是JSX，也就是虚拟DOM\r\n-    return createDOM(realVDOM)\r\n+    let realvNode = classInstance.render()    //render()的返回值才是JSX，也就是虚拟DOM\r\n+    return createDOM(realvNode)\r\n }\r\n \r\n \r\n-function handleFunctionComponent(VDOM){\r\n-    let {type, props} = VDOM\r\n-    let realVDOM = type(props)       //函数执行的返回值就是虚拟DOM\r\n-    return createDOM(realVDOM)\r\n+function handleFunctionComponent(vNode){\r\n+    let {type, props} = vNode\r\n+    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n+    return createDOM(realvNode)\r\n }\r\n \r\n \r\n function updateProps(DOM, oldProps, newProps){  //props:{children, className, style, onXXX}\r\n"
                },
                {
                    "date": 1667367297626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         return document.createTextNode(vNode)\r\n     }\r\n \r\n     let {type, props} = vNode\r\n-\r\n+    //真实dom\r\n     let DOM =null\r\n     \r\n     if(typeof type === \"function\"){          \r\n         if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n"
                },
                {
                    "date": 1667368509962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \r\n function handleClassComponent(vNode){     //对于类式组件\r\n     let {type, props} = vNode\r\n     let classInstance = new type(props)\r\n-    let realvNode = classInstance.render()    //render()的返回值才是JSX，也就是虚拟DOM\r\n+    let realvNode = classInstance.render()    //render的返回值才是虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667368979146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,58 @@\n-//初始化\r\n-function render(vNode, container){\r\n-    let newDom = createDOM(vNode)\r\n-    console.log(newDom  );\r\n-    //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(newDom )\r\n+function render(VDOM, container) {   //把虚拟DOM转为真实DOM   把真实DOM挂到指定容器\r\n+    let dom = createDOM(VDOM)       //根据虚拟DOM生成真实DOM\r\n+    container.appendChild(DOM)      //将真实DOM挂载到了页面\r\n }\r\n \r\n+function createDOM(VDOM){       //VDOM: {type, props, ref, key}\r\n \r\n-function createDOM(vNode){\r\n-\r\n-    if(Object(vNode) !== vNode){\r\n-        return document.createTextNode(vNode)\r\n-    }\r\n-\r\n-    let {type, props} = vNode\r\n-    //真实dom\r\n-    let DOM =null\r\n-    \r\n-    if(typeof type === \"function\"){          \r\n-        if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n-            return handleClassComponent(vNode)\r\n-        }\r\n-        return handleFunctionComponent(vNode)\r\n-    }else{\r\n-        DOM = document.createElement(type)\r\n+    if(Object(VDOM) !== VDOM){         //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n+        return document.createTextNode(VDOM)\r\n     } \r\n-    //更新\r\n-    updateProps(DOM, null, props)\r\n \r\n-    let {children} = props\r\n-    if(children){\r\n-        handleChildren(DOM, children)\r\n-    }\r\n+    let {type, ref, key, props} = VDOM\r\n \r\n-    return DOM\r\n-}\r\n+    let dom = document.createElement(type)   //根据type创建真正的dom\r\n \r\n-function handleClassComponent(vNode){     //对于类式组件\r\n-    let {type, props} = vNode\r\n-    let classInstance = new type(props)\r\n-    let realvNode = classInstance.render()    //render的返回值才是虚拟DOM\r\n-    return createDOM(realvNode)\r\n-}\r\n+    updateProps(dom, null, props)\r\n \r\n-\r\n-function handleFunctionComponent(vNode){\r\n-    let {type, props} = vNode\r\n-    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n-    return createDOM(realvNode)\r\n+    let children = props.children\r\n+    if(children){                       // <span></span>  这种情况的话 props:{}\r\n+        handleChildren(dom, children)\r\n+    }\r\n+    \r\n+    return dom\r\n }\r\n \r\n-\r\n-function updateProps(DOM, oldProps, newProps){  //props:{children, className, style, onXXX}\r\n-    if(newProps){\r\n-        for(let key in newProps){\r\n-            if(key === \"children\"){\r\n-                continue\r\n-            }else if(key === \"style\"){\r\n-                let styleObject = newProps[key]\r\n-                for(let item in styleObject){\r\n-                    DOM.style[item] = styleObject[item]\r\n-                }\r\n-    \r\n-            }else if(key.startsWith(\"on\")){\r\n-                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n-            }else{\r\n-                DOM[key] = newProps[key]\r\n+function updateProps(dom, oldProps, newProps){      //props:{children, className, style}\r\n+    for(let key in newProps){\r\n+        if(key === \"children\"){\r\n+            continue\r\n+        }else if(key === \"style\"){\r\n+            let styleObject = newProps[key]\r\n+            for(let item in styleObject){\r\n+                dom.style[key] = styleObject[item]\r\n             }\r\n+        }else if(key.startsWith(\"on\")){     //说明是绑定的事件\r\n+            dom[key.toLocaleLowerCase()] = newProps[key]\r\n+        }else{\r\n+            dom[key] = newProps[key]\r\n         }\r\n     }\r\n-    \r\n \r\n-    if(oldProps){\r\n+    if(oldProps){           //更新处理。如果旧的属性在新的属性中不存在，那么就删除\r\n         for(let key in oldProps){\r\n-            if(!newProps[key]) DOM[key] = null\r\n+            if(!newProps[key])  delete oldProps[key]\r\n         }\r\n     }\r\n }\r\n \r\n-function handleChildren(DOM, children){\r\n+//形成递归  children:[\"hello, react\", { xxxx,xxxx VDOM }]\r\n+function handleChildren(dom, children){     \r\n     if(children instanceof Array){\r\n-        children.forEach(child => render(child, DOM) )\r\n+        children.forEach( child => render(child, dom))\r\n     }else{\r\n-        render(children, DOM)\r\n+        render(child, dom)\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667369084279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n-function render(VDOM, container) {   //把虚拟DOM转为真实DOM   把真实DOM挂到指定容器\r\n-    let dom = createDOM(VDOM)       //根据虚拟DOM生成真实DOM\r\n+function render(VNode, container) {   //把虚拟DOM转为真实DOM   把真实DOM挂到指定容器\r\n+    let dom = createDOM(VNode)       //根据虚拟DOM生成真实DOM\r\n     container.appendChild(DOM)      //将真实DOM挂载到了页面\r\n }\r\n \r\n-function createDOM(VDOM){       //VDOM: {type, props, ref, key}\r\n+function createDOM(VNode){       //VNode: {type, props, ref, key}\r\n \r\n-    if(Object(VDOM) !== VDOM){         //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-        return document.createTextNode(VDOM)\r\n+    if(Object(VNode) !== VNode){  //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n+        return document.createTextNode(VNode)\r\n     } \r\n \r\n-    let {type, ref, key, props} = VDOM\r\n+    let {type, ref, key, props} = VNode\r\n \r\n     let dom = document.createElement(type)   //根据type创建真正的dom\r\n \r\n     updateProps(dom, null, props)\r\n@@ -45,9 +45,9 @@\n         }\r\n     }\r\n }\r\n \r\n-//形成递归  children:[\"hello, react\", { xxxx,xxxx VDOM }]\r\n+//形成递归  children:[\"hello, react\", { xxxx,xxxx VNode }]\r\n function handleChildren(dom, children){     \r\n     if(children instanceof Array){\r\n         children.forEach( child => render(child, dom))\r\n     }else{\r\n"
                },
                {
                    "date": 1667369134473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n function render(VNode, container) {   //把虚拟DOM转为真实DOM   把真实DOM挂到指定容器\r\n     let dom = createDOM(VNode)       //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(DOM)      //将真实DOM挂载到了页面\r\n+    container.appendChild(dom)      //将真实DOM挂载到了页面\r\n }\r\n \r\n function createDOM(VNode){       //VNode: {type, props, ref, key}\r\n \r\n"
                },
                {
                    "date": 1667369182744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n \r\n //形成递归  children:[\"hello, react\", { xxxx,xxxx VNode }]\r\n function handleChildren(dom, children){     \r\n     if(children instanceof Array){\r\n-        children.forEach( child => render(child, dom))\r\n+        children.forEach( item => render(item, dom))\r\n     }else{\r\n-        render(child, dom)\r\n+        render(item, dom)\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667369221226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n \r\n //形成递归  children:[\"hello, react\", { xxxx,xxxx VNode }]\r\n function handleChildren(dom, children){     \r\n     if(children instanceof Array){\r\n-        children.forEach( item => render(item, dom))\r\n+        children.forEach( children => render(children, dom))\r\n     }else{\r\n-        render(item, dom)\r\n+        render(children, dom)\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667369274259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,89 @@\n-function render(VNode, container) {   //把虚拟DOM转为真实DOM   把真实DOM挂到指定容器\r\n-    let dom = createDOM(VNode)       //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(dom)      //将真实DOM挂载到了页面\r\n+//初始化\r\n+function render(vNode, container){\r\n+    let newDom = createDOM(vNode)\r\n+    console.log(newDom  );\r\n+    //根据虚拟DOM生成真实DOM\r\n+    container.appendChild(newDom )\r\n }\r\n \r\n-function createDOM(VNode){       //VNode: {type, props, ref, key}\r\n \r\n-    if(Object(VNode) !== VNode){  //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-        return document.createTextNode(VNode)\r\n+function createDOM(vNode){\r\n+\r\n+    if(Object(vNode) !== vNode){\r\n+        return document.createTextNode(vNode)\r\n+    }\r\n+\r\n+    let {type, props} = vNode\r\n+    //真实dom\r\n+    let DOM =null\r\n+    \r\n+    if(typeof type === \"function\"){          \r\n+        if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n+            return handleClassComponent(vNode)\r\n+        }\r\n+        return handleFunctionComponent(vNode)\r\n+    }else{\r\n+        DOM = document.createElement(type)\r\n     } \r\n+    //更新\r\n+    updateProps(DOM, null, props)\r\n \r\n-    let {type, ref, key, props} = VNode\r\n+    let {children} = props\r\n+    if(children){\r\n+        handleChildren(DOM, children)\r\n+    }\r\n \r\n-    let dom = document.createElement(type)   //根据type创建真正的dom\r\n+    return DOM\r\n+}\r\n \r\n-    updateProps(dom, null, props)\r\n+function handleClassComponent(vNode){     //对于类式组件\r\n+    let {type, props} = vNode\r\n+    let classInstance = new type(props)\r\n+    let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n+    return createDOM(realvNode)\r\n+}\r\n \r\n-    let children = props.children\r\n-    if(children){                       // <span></span>  这种情况的话 props:{}\r\n-        handleChildren(dom, children)\r\n-    }\r\n-    \r\n-    return dom\r\n+\r\n+function handleFunctionComponent(vNode){\r\n+    let {type, props} = vNode\r\n+    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n+    return createDOM(realvNode)\r\n }\r\n \r\n-function updateProps(dom, oldProps, newProps){      //props:{children, className, style}\r\n-    for(let key in newProps){\r\n-        if(key === \"children\"){\r\n-            continue\r\n-        }else if(key === \"style\"){\r\n-            let styleObject = newProps[key]\r\n-            for(let item in styleObject){\r\n-                dom.style[key] = styleObject[item]\r\n+\r\n+function updateProps(DOM, oldProps, newProps){  //props:{children, className, style, onXXX}\r\n+    if(newProps){\r\n+        for(let key in newProps){\r\n+            if(key === \"children\"){\r\n+                continue\r\n+            }else if(key === \"style\"){\r\n+                let styleObject = newProps[key]\r\n+                for(let item in styleObject){\r\n+                    DOM.style[item] = styleObject[item]\r\n+                }\r\n+    \r\n+            }else if(key.startsWith(\"on\")){\r\n+                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n+            }else{\r\n+                DOM[key] = newProps[key]\r\n             }\r\n-        }else if(key.startsWith(\"on\")){     //说明是绑定的事件\r\n-            dom[key.toLocaleLowerCase()] = newProps[key]\r\n-        }else{\r\n-            dom[key] = newProps[key]\r\n         }\r\n     }\r\n+    \r\n \r\n-    if(oldProps){           //更新处理。如果旧的属性在新的属性中不存在，那么就删除\r\n+    if(oldProps){\r\n         for(let key in oldProps){\r\n-            if(!newProps[key])  delete oldProps[key]\r\n+            if(!newProps[key]) DOM[key] = null\r\n         }\r\n     }\r\n }\r\n \r\n-//形成递归  children:[\"hello, react\", { xxxx,xxxx VNode }]\r\n-function handleChildren(dom, children){     \r\n+function handleChildren(DOM, children){\r\n     if(children instanceof Array){\r\n-        children.forEach( children => render(children, dom))\r\n+        children.forEach(child => render(child, DOM) )\r\n     }else{\r\n-        render(children, dom)\r\n+        render(children, DOM)\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1667377411887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n }\r\n \r\n \r\n function createDOM(vNode){\r\n-\r\n+    //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n     if(Object(vNode) !== vNode){\r\n         return document.createTextNode(vNode)\r\n     }\r\n \r\n     let {type, props} = vNode\r\n     //真实dom\r\n-    let DOM =null\r\n+    let DOM\r\n     \r\n     if(typeof type === \"function\"){          \r\n         if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n             return handleClassComponent(vNode)\r\n@@ -24,16 +24,22 @@\n         return handleFunctionComponent(vNode)\r\n     }else{\r\n         DOM = document.createElement(type)\r\n     } \r\n+\r\n+    if(props){\r\n     //更新\r\n-    updateProps(DOM, null, props)\r\n-\r\n+    updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n+    //处理children\r\n     let {children} = props\r\n-    if(children){\r\n+    if(children){ //span 不显示  写一个handleChildren方法处里children \r\n         handleChildren(DOM, children)\r\n     }\r\n \r\n+    }\r\n+\r\n+\r\n+\r\n     return DOM\r\n }\r\n \r\n function handleClassComponent(vNode){     //对于类式组件\r\n"
                },
                {
                    "date": 1667377436673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,94 +1,92 @@\n //初始化\r\n-function render(vNode, container){\r\n+function render(vNode, container) {\r\n     let newDom = createDOM(vNode)\r\n-    console.log(newDom  );\r\n+    console.log(newDom);\r\n     //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(newDom )\r\n+    container.appendChild(newDom)\r\n }\r\n \r\n \r\n-function createDOM(vNode){\r\n+function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-    if(Object(vNode) !== vNode){\r\n+    if (Object(vNode) !== vNode) {\r\n         return document.createTextNode(vNode)\r\n     }\r\n \r\n-    let {type, props} = vNode\r\n+    let { type, props } = vNode\r\n     //真实dom\r\n     let DOM\r\n-    \r\n-    if(typeof type === \"function\"){          \r\n-        if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n+\r\n+    if (typeof type === \"function\") {\r\n+        if (type.isClassComponent) {          //判断是类式组件还是函数式组件，分别处理\r\n             return handleClassComponent(vNode)\r\n         }\r\n         return handleFunctionComponent(vNode)\r\n-    }else{\r\n+    } else {\r\n         DOM = document.createElement(type)\r\n-    } \r\n-\r\n-    if(props){\r\n-    //更新\r\n-    updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n-    //处理children\r\n-    let {children} = props\r\n-    if(children){ //span 不显示  写一个handleChildren方法处里children \r\n-        handleChildren(DOM, children)\r\n     }\r\n \r\n+    if (props) {\r\n+        //更新\r\n+        updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n+        //处理children\r\n+        let { children } = props\r\n+        if (children) { //span 不显示  写一个handleChildren方法处里children \r\n+            handleChildren(DOM, children)\r\n+        }\r\n+\r\n     }\r\n \r\n-\r\n-\r\n     return DOM\r\n }\r\n \r\n-function handleClassComponent(vNode){     //对于类式组件\r\n-    let {type, props} = vNode\r\n+function handleClassComponent(vNode) {     //对于类式组件\r\n+    let { type, props } = vNode\r\n     let classInstance = new type(props)\r\n     let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n \r\n \r\n-function handleFunctionComponent(vNode){\r\n-    let {type, props} = vNode\r\n+function handleFunctionComponent(vNode) {\r\n+    let { type, props } = vNode\r\n     let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n \r\n \r\n-function updateProps(DOM, oldProps, newProps){  //props:{children, className, style, onXXX}\r\n-    if(newProps){\r\n-        for(let key in newProps){\r\n-            if(key === \"children\"){\r\n+function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n+    if (newProps) {\r\n+        for (let key in newProps) {\r\n+            if (key === \"children\") {\r\n                 continue\r\n-            }else if(key === \"style\"){\r\n+            } else if (key === \"style\") {\r\n                 let styleObject = newProps[key]\r\n-                for(let item in styleObject){\r\n+                for (let item in styleObject) {\r\n                     DOM.style[item] = styleObject[item]\r\n                 }\r\n-    \r\n-            }else if(key.startsWith(\"on\")){\r\n+\r\n+            } else if (key.startsWith(\"on\")) {\r\n                 DOM[key.toLocaleLowerCase()] = newProps[key]\r\n-            }else{\r\n+            } else {\r\n                 DOM[key] = newProps[key]\r\n             }\r\n         }\r\n     }\r\n-    \r\n \r\n-    if(oldProps){\r\n-        for(let key in oldProps){\r\n-            if(!newProps[key]) DOM[key] = null\r\n+\r\n+    if (oldProps) {\r\n+        for (let key in oldProps) {\r\n+            if (!newProps[key]) DOM[key] = null\r\n         }\r\n     }\r\n }\r\n \r\n-function handleChildren(DOM, children){\r\n-    if(children instanceof Array){\r\n-        children.forEach(child => render(child, DOM) )\r\n-    }else{\r\n+function handleChildren(DOM, children) {\r\n+    if (children instanceof Array) {\r\n+        children.forEach(child => render(child, DOM))\r\n+    } else {\r\n         render(children, DOM)\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1667377534338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     //真实dom\r\n     let DOM\r\n \r\n     if (typeof type === \"function\") {\r\n-        if (type.isClassComponent) {          //判断是类式组件还是函数式组件，分别处理\r\n+        if (type.isClassComponent) {       //判断是类式组件还是函数式组件，分别处理\r\n             return handleClassComponent(vNode)\r\n         }\r\n         return handleFunctionComponent(vNode)\r\n     } else {\r\n"
                },
                {
                    "date": 1667377814706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,12 @@\n \r\n \r\n function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-    if (Object(vNode) !== vNode) {\r\n+    if (type === REACT_TEXT) {\r\n         return document.createTextNode(vNode)\r\n+    }else{\r\n+        return document.createElement(vNode)\r\n     }\r\n \r\n     let { type, props } = vNode\r\n     //真实dom\r\n"
                },
                {
                    "date": 1667377906888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import { REACT_TEXT, REACT_ELEMENT } from \"./static\"\r\n+\r\n //初始化\r\n function render(vNode, container) {\r\n     let newDom = createDOM(vNode)\r\n     console.log(newDom);\r\n@@ -10,9 +12,9 @@\n function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n     if (type === REACT_TEXT) {\r\n         return document.createTextNode(vNode)\r\n-    }else{\r\n+    }if(type === REACT_ELEMENT){\r\n         return document.createElement(vNode)\r\n     }\r\n \r\n     let { type, props } = vNode\r\n"
                },
                {
                    "date": 1667377967018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { REACT_TEXT, REACT_ELEMENT } from \"./static\"\r\n+import { REACT_TEXT } from \"./static\"\r\n \r\n //初始化\r\n function render(vNode, container) {\r\n     let newDom = createDOM(vNode)\r\n@@ -12,9 +12,9 @@\n function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n     if (type === REACT_TEXT) {\r\n         return document.createTextNode(vNode)\r\n-    }if(type === REACT_ELEMENT){\r\n+    }else{\r\n         return document.createElement(vNode)\r\n     }\r\n \r\n     let { type, props } = vNode\r\n"
                },
                {
                    "date": 1667378019440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-import { REACT_TEXT } from \"./static\"\r\n-\r\n //初始化\r\n function render(vNode, container) {\r\n     let newDom = createDOM(vNode)\r\n     console.log(newDom);\r\n@@ -10,12 +8,10 @@\n \r\n \r\n function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-    if (type === REACT_TEXT) {\r\n+    if (Object(vNode) !== vNode) {\r\n         return document.createTextNode(vNode)\r\n-    }else{\r\n-        return document.createElement(vNode)\r\n     }\r\n \r\n     let { type, props } = vNode\r\n     //真实dom\r\n"
                },
                {
                    "date": 1667378179802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n             handleChildren(DOM, children)\r\n         }\r\n \r\n     }\r\n-\r\n     return DOM\r\n }\r\n \r\n function handleClassComponent(vNode) {     //对于类式组件\r\n"
                },
                {
                    "date": 1667378678937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         return handleFunctionComponent(vNode)\r\n     } else {\r\n         DOM = document.createElement(type)\r\n     }\r\n-\r\n+    // 处理props\r\n     if (props) {\r\n         //更新\r\n         updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n         //处理children\r\n"
                },
                {
                    "date": 1667379674136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+//初始化\r\n+function render(vNode, container) {\r\n+    let newDom = createDOM(vNode)\r\n+    console.log(newDom);\r\n+    //根据虚拟DOM生成真实DOM\r\n+    container.appendChild(newDom)\r\n+}\r\n+\r\n+\r\n+function createDOM(vNode) {\r\n+    //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n+    if (Object(vNode) !== vNode) {\r\n+        return document.createTextNode(vNode)\r\n+    }\r\n+\r\n+    let { type, props } = vNode\r\n+    //真实dom\r\n+    let DOM\r\n+\r\n+    if (typeof type === \"function\") {\r\n+        if (type.isClassComponent) {       //判断是类式组件还是函数式组件，分别处理\r\n+            return handleClassComponent(vNode)\r\n+        }\r\n+        return handleFunctionComponent(vNode)\r\n+    } else {\r\n+        DOM = document.createElement(type)\r\n+    }\r\n+    // 处理props\r\n+    if (props) {\r\n+        //更新\r\n+        updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n+        //处理children\r\n+        let { children } = props\r\n+        if (children) { //span 不显示  写一个handleChildren方法处里children \r\n+            handleChildren(DOM, children)\r\n+        }\r\n+\r\n+    }\r\n+    return DOM\r\n+}\r\n+\r\n+//类组件\r\n+function handleClassComponent(vNode) {     \r\n+    let { type, props } = vNode\r\n+    let classInstance = new type(props)\r\n+    let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n+    return createDOM(realvNode)\r\n+}\r\n+\r\n+//函数组件\r\n+function handleFunctionComponent(vNode) {\r\n+    let { type, props } = vNode\r\n+    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n+    return createDOM(realvNode)\r\n+}\r\n+\r\n+\r\n+function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n+    if (newProps) {\r\n+        for (let key in newProps) {\r\n+            if (key === \"children\") {\r\n+                continue\r\n+            } else if (key === \"style\") {\r\n+                let styleObject = newProps[key]\r\n+                for (let item in styleObject) {\r\n+                    DOM.style[item] = styleObject[item]\r\n+                }\r\n+\r\n+            } else if (key.startsWith(\"on\")) {\r\n+                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n+            } else {\r\n+                DOM[key] = newProps[key]\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    if (oldProps) {\r\n+        for (let key in oldProps) {\r\n+            if (!newProps[key]) DOM[key] = null\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+function handleChildren(DOM, children) {\r\n+    if (children instanceof Array) {\r\n+        children.forEach(child => render(child, DOM))\r\n+    } else {\r\n+        render(children, DOM)\r\n+    }\r\n+}\r\n+\r\n+\r\n+const ReactDOM = {\r\n+    render\r\n+}\r\n+\r\n+export default ReactDOM\n\\ No newline at end of file\n"
                },
                {
                    "date": 1667379720220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n \r\n-\r\n+//更新props\r\n function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n     if (newProps) {\r\n         for (let key in newProps) {\r\n             if (key === \"children\") {\r\n@@ -94,102 +94,5 @@\n const ReactDOM = {\r\n     render\r\n }\r\n \r\n-export default ReactDOM\n-//初始化\r\n-function render(vNode, container) {\r\n-    let newDom = createDOM(vNode)\r\n-    console.log(newDom);\r\n-    //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(newDom)\r\n-}\r\n-\r\n-\r\n-function createDOM(vNode) {\r\n-    //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n-    if (Object(vNode) !== vNode) {\r\n-        return document.createTextNode(vNode)\r\n-    }\r\n-\r\n-    let { type, props } = vNode\r\n-    //真实dom\r\n-    let DOM\r\n-\r\n-    if (typeof type === \"function\") {\r\n-        if (type.isClassComponent) {       //判断是类式组件还是函数式组件，分别处理\r\n-            return handleClassComponent(vNode)\r\n-        }\r\n-        return handleFunctionComponent(vNode)\r\n-    } else {\r\n-        DOM = document.createElement(type)\r\n-    }\r\n-    // 处理props\r\n-    if (props) {\r\n-        //更新\r\n-        updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n-        //处理children\r\n-        let { children } = props\r\n-        if (children) { //span 不显示  写一个handleChildren方法处里children \r\n-            handleChildren(DOM, children)\r\n-        }\r\n-\r\n-    }\r\n-    return DOM\r\n-}\r\n-\r\n-function handleClassComponent(vNode) {     //对于类式组件\r\n-    let { type, props } = vNode\r\n-    let classInstance = new type(props)\r\n-    let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n-    return createDOM(realvNode)\r\n-}\r\n-\r\n-\r\n-function handleFunctionComponent(vNode) {\r\n-    let { type, props } = vNode\r\n-    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n-    return createDOM(realvNode)\r\n-}\r\n-\r\n-\r\n-function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n-    if (newProps) {\r\n-        for (let key in newProps) {\r\n-            if (key === \"children\") {\r\n-                continue\r\n-            } else if (key === \"style\") {\r\n-                let styleObject = newProps[key]\r\n-                for (let item in styleObject) {\r\n-                    DOM.style[item] = styleObject[item]\r\n-                }\r\n-\r\n-            } else if (key.startsWith(\"on\")) {\r\n-                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n-            } else {\r\n-                DOM[key] = newProps[key]\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    if (oldProps) {\r\n-        for (let key in oldProps) {\r\n-            if (!newProps[key]) DOM[key] = null\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-function handleChildren(DOM, children) {\r\n-    if (children instanceof Array) {\r\n-        children.forEach(child => render(child, DOM))\r\n-    } else {\r\n-        render(children, DOM)\r\n-    }\r\n-}\r\n-\r\n-\r\n-const ReactDOM = {\r\n-    render\r\n-}\r\n-\r\n export default ReactDOM\n\\ No newline at end of file\n"
                },
                {
                    "date": 1667379841247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     //根据虚拟DOM生成真实DOM\r\n     container.appendChild(newDom)\r\n }\r\n \r\n-\r\n+//创建Dom\r\n function createDOM(vNode) {\r\n     //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n     if (Object(vNode) !== vNode) {\r\n         return document.createTextNode(vNode)\r\n@@ -39,9 +39,9 @@\n     return DOM\r\n }\r\n \r\n //类组件\r\n-function handleClassComponent(vNode) {     \r\n+function handleClassComponent(vNode) {\r\n     let { type, props } = vNode\r\n     let classInstance = new type(props)\r\n     let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n     return createDOM(realvNode)\r\n"
                },
                {
                    "date": 1667379984159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n     let DOM\r\n \r\n     if (typeof type === \"function\") {\r\n         if (type.isClassComponent) {       //判断是类式组件还是函数式组件，分别处理\r\n-            return handleClassComponent(vNode)\r\n+            return mountClassComponent(vNode)\r\n         }\r\n-        return handleFunctionComponent(vNode)\r\n+        return mountFunctionComponent(vNode)\r\n     } else {\r\n         DOM = document.createElement(type)\r\n     }\r\n     // 处理props\r\n@@ -39,17 +39,17 @@\n     return DOM\r\n }\r\n \r\n //类组件\r\n-function handleClassComponent(vNode) {\r\n+function mountClassComponent(vNode) {\r\n     let { type, props } = vNode\r\n     let classInstance = new type(props)\r\n     let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n \r\n //函数组件\r\n-function handleFunctionComponent(vNode) {\r\n+function mountFunctionComponent(vNode) {\r\n     let { type, props } = vNode\r\n     let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n     return createDOM(realvNode)\r\n }\r\n@@ -81,8 +81,9 @@\n         }\r\n     }\r\n }\r\n \r\n+//更新children\r\n function handleChildren(DOM, children) {\r\n     if (children instanceof Array) {\r\n         children.forEach(child => render(child, DOM))\r\n     } else {\r\n"
                },
                {
                    "date": 1667380299021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,21 +38,21 @@\n     }\r\n     return DOM\r\n }\r\n \r\n-//类组件\r\n+//处理类组件\r\n function mountClassComponent(vNode) {\r\n     let { type, props } = vNode\r\n     let classInstance = new type(props)\r\n-    let realvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n-    return createDOM(realvNode)\r\n+    let FvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n+    return createDOM(FvNode)\r\n }\r\n \r\n-//函数组件\r\n+//处理函数组件\r\n function mountFunctionComponent(vNode) {\r\n     let { type, props } = vNode\r\n-    let realvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n-    return createDOM(realvNode)\r\n+    let cvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n+    return createDOM(cvNode)\r\n }\r\n \r\n //更新props\r\n function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n"
                },
                {
                    "date": 1667380317815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n //处理类组件\r\n function mountClassComponent(vNode) {\r\n     let { type, props } = vNode\r\n     let classInstance = new type(props)\r\n-    let FvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n-    return createDOM(FvNode)\r\n+    let fvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n+    return createDOM(fvNode)\r\n }\r\n \r\n //处理函数组件\r\n function mountFunctionComponent(vNode) {\r\n"
                }
            ],
            "date": 1667363253637,
            "name": "Commit-0",
            "content": "function render(VDOM, container){\r\n    let DOM = createDOM(VDOM)\r\n    container.appendChild(DOM)\r\n}\r\n\r\n\r\nfunction createDOM(VDOM){\r\n\r\n    if(Object(VDOM) !== VDOM){\r\n        return document.createTextNode(VDOM)\r\n    }\r\n\r\n    let {type, props} = VDOM\r\n\r\n    let DOM =null\r\n    \r\n    if(typeof type === \"function\"){          //新增部分\r\n        if(type.isClassComponent){          //判断是类式组件还是函数式组件，分别处理\r\n            return handleClassComponent(VDOM)\r\n        }\r\n        return handleFunctionComponent(VDOM)\r\n    }else{\r\n        DOM = document.createElement(type)\r\n    } \r\n    \r\n    updateProps(DOM, null, props)\r\n\r\n    let {children} = props\r\n    if(children){\r\n        handleChildren(DOM, children)\r\n    }\r\n\r\n    return DOM\r\n}\r\n\r\nfunction handleClassComponent(VDOM){     //对于类式组件\r\n    let {type, props} = VDOM\r\n    let classInstance = new type(props)\r\n    let realVDOM = classInstance.render()    //render()的返回值才是JSX，也就是虚拟DOM\r\n    return createDOM(realVDOM)\r\n}\r\n\r\n\r\nfunction handleFunctionComponent(VDOM){\r\n    let {type, props} = VDOM\r\n    let realVDOM = type(props)       //函数执行的返回值就是虚拟DOM\r\n    return createDOM(realVDOM)\r\n}\r\n\r\n\r\nfunction updateProps(DOM, oldProps, newProps){     //props:{children, className, style, onXXX}\r\n    if(newProps){\r\n        for(let key in newProps){\r\n            if(key === \"children\"){\r\n                continue\r\n            }else if(key === \"style\"){\r\n                let styleObject = newProps[key]\r\n                for(let item in styleObject){\r\n                    DOM.style[item] = styleObject[item]\r\n                }\r\n    \r\n            }else if(key.startsWith(\"on\")){\r\n                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n            }else{\r\n                DOM[key] = newProps[key]\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    if(oldProps){\r\n        for(let key in oldProps){\r\n            if(!newProps[key]) DOM[key] = null\r\n        }\r\n    }\r\n}\r\n\r\nfunction handleChildren(DOM, children){\r\n    if(children instanceof Array){\r\n        children.forEach(child => render(child, DOM) )\r\n    }else{\r\n        render(children, DOM)\r\n    }\r\n}\r\n\r\n\r\nconst ReactDOM = {\r\n    render\r\n}\r\n\r\nexport default ReactDOM"
        }
    ]
}