{
    "sourceFile": "src/source/vNode/react-dom.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1667473132692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1667473337375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,83 +3,106 @@\n  * @version: \r\n  * @Author: kiko\r\n  * @Date: 2022-11-01 20:00:37\r\n  * @LastEditors: kiko\r\n- * @LastEditTime: 2022-11-03 18:58:52\r\n+ * @LastEditTime: 2022-11-03 19:02:17\r\n  */\r\n-import { REACT_TEXT } from \"./static\"\r\n-\r\n //初始化\r\n-function render(VNode, container) {\r\n-    mount(VNode, container)\r\n+function render(vNode, container) {\r\n+    let newDom = createDOM(vNode)\r\n+    console.log(newDom);\r\n+    //根据虚拟DOM生成真实DOM\r\n+    container.appendChild(newDom)\r\n }\r\n \r\n-function mount(VNode, container){\r\n-    let newDom = createDOM(VNode)       //根据虚拟DOM生成真实DOM\r\n-    container.appendChild(newDom)      //将真实DOM挂载到了页面\r\n-}\r\n+//创建Dom\r\n+function createDOM(vNode) {\r\n+    //如果是文本类型的，就直接创建文本节点，也是递归的出口\r\n+    if (Object(vNode) !== vNode) {\r\n+        return document.createTextNode(vNode)\r\n+    }\r\n \r\n-function createDOM(VNode){ //VNode=>真实DOM\r\n-    let {type,  props} = VNode\r\n-    let dom //真实dom\r\n-    //判断类型是文本还是元素\r\n-    if(type===REACT_TEXT){\r\n-        dom = document.createTextNode(type)  //如果是文本，就直接创建文本节点\r\n-    }else{\r\n-        dom = document.createElement(type)   //如果是元素，就直接创建元素\r\n-    } \r\n-    //处理props\r\n-    if(props){\r\n-        updateProps(dom, null, props)\r\n-            //处理children\r\n-        let children = props.children\r\n-        if(children){           // <span></span>  这种情况的话 props:  \r\n-        handleChildren(dom, children)\r\n+    let { type, props } = vNode\r\n+    //真实dom\r\n+    let DOM\r\n+\r\n+    if (typeof type === \"function\") {\r\n+        if (type.isClassComponent) {       //判断是类式组件还是函数式组件，分别处理\r\n+            return mountClassComponent(vNode)\r\n+        }\r\n+        return mountFunctionComponent(vNode)\r\n+    } else {\r\n+        DOM = document.createElement(type)\r\n     }\r\n+    // 处理props\r\n+    if (props) {\r\n+        //更新\r\n+        updateProps(DOM, {}, props) //真实dom和旧属性，新属性\r\n+        //处理children\r\n+        let { children } = props\r\n+        if (children) { //span 不显示  写一个handleChildren方法处里children \r\n+            handleChildren(DOM, children)\r\n+        }\r\n+\r\n     }\r\n+    return DOM\r\n+}\r\n \r\n+//处理类组件\r\n+function mountClassComponent(vNode) {\r\n+    let { type, props } = vNode\r\n+    let classInstance = new type(props)\r\n+    let fvNode = classInstance.render()    //render的返回值才虚拟DOM\r\n+    return createDOM(fvNode)\r\n+}\r\n \r\n-    return dom\r\n+//处理函数组件\r\n+function mountFunctionComponent(vNode) {\r\n\\ No newline at end of file\n+    let { type, props } = vNode\r\n+    let cvNode = type(props)       //函数执行的返回值就是虚拟DOM\r\n+    return createDOM(cvNode)\r\n }\r\n \r\n+//更新props\r\n+function updateProps(DOM, oldProps, newProps) {  //props:{children, className, style, onXXX}\r\n+    if (newProps) {\r\n+        for (let key in newProps) {\r\n+            if (key === \"children\") {\r\n+                continue\r\n+            } else if (key === \"style\") {\r\n+                let styleObject = newProps[key]\r\n+                for (let item in styleObject) {\r\n+                    DOM.style[item] = styleObject[item]\r\n+                }\r\n \r\n-//更新属性\r\n-function updateProps(dom, oldProps, newProps){\r\n-\r\n-    for(let key in newProps){//处理props时候注意children, className, style\r\n-        if(key === \"children\"){\r\n-            continue\r\n-        }else if(key === \"style\"){\r\n-            let styleObject = newProps[key]\r\n-            for(let item in styleObject){\r\n-                //给真实dom添加样式\r\n-                dom.style[key] = styleObject[item]\r\n+            } else if (key.startsWith(\"on\")) {\r\n+                DOM[key.toLocaleLowerCase()] = newProps[key]\r\n+            } else {\r\n+                DOM[key] = newProps[key]\r\n             }\r\n-        }else if(key.startsWith(\"on\")){     //说明是绑定的事件\r\n-            dom[key.toLocaleLowerCase()] = newProps[key]\r\n-        }else{\r\n-            dom[key] = newProps[key]\r\n         }\r\n     }\r\n \r\n-    if(oldProps){           //更新处理。如果旧的属性在新的属性中不存在，那么就删除\r\n-        for(let key in oldProps){\r\n-            if(!newProps[key])  delete oldProps[key]\r\n+\r\n+    if (oldProps) {\r\n+        for (let key in oldProps) {\r\n+            if (!newProps[key]) DOM[key] = null\r\n         }\r\n     }\r\n }\r\n \r\n-//处理  children\r\n-function handleChildren(dom, children){   \r\n-    if(typeof children ==='object' &&children.type){\r\n-        mount(children,dom)\r\n-    }if( Array.isArray(children)){\r\n-        children.forEach( item=> mount(item, dom))\r\n+//更新children\r\n+function handleChildren(DOM, children) {\r\n+    if (children instanceof Array) {\r\n+        children.forEach(child => render(child, DOM))\r\n+    } else {\r\n+        render(children, DOM)\r\n     }\r\n-    \r\n }\r\n \r\n \r\n-const ReactDOM={\r\n+const ReactDOM = {\r\n     render\r\n }\r\n-export default ReactDOM\n+\r\n+export default ReactDOM\r\n+\r\n"
                }
            ],
            "date": 1667473132692,
            "name": "Commit-0",
            "content": "/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: kiko\r\n * @Date: 2022-11-01 20:00:37\r\n * @LastEditors: kiko\r\n * @LastEditTime: 2022-11-03 18:58:52\r\n */\r\nimport { REACT_TEXT } from \"./static\"\r\n\r\n//初始化\r\nfunction render(VNode, container) {\r\n    mount(VNode, container)\r\n}\r\n\r\nfunction mount(VNode, container){\r\n    let newDom = createDOM(VNode)       //根据虚拟DOM生成真实DOM\r\n    container.appendChild(newDom)      //将真实DOM挂载到了页面\r\n}\r\n\r\nfunction createDOM(VNode){ //VNode=>真实DOM\r\n    let {type,  props} = VNode\r\n    let dom //真实dom\r\n    //判断类型是文本还是元素\r\n    if(type===REACT_TEXT){\r\n        dom = document.createTextNode(type)  //如果是文本，就直接创建文本节点\r\n    }else{\r\n        dom = document.createElement(type)   //如果是元素，就直接创建元素\r\n    } \r\n    //处理props\r\n    if(props){\r\n        updateProps(dom, null, props)\r\n            //处理children\r\n        let children = props.children\r\n        if(children){           // <span></span>  这种情况的话 props:  \r\n        handleChildren(dom, children)\r\n    }\r\n    }\r\n\r\n\r\n    return dom\r\n}\r\n\r\n\r\n//更新属性\r\nfunction updateProps(dom, oldProps, newProps){\r\n\r\n    for(let key in newProps){//处理props时候注意children, className, style\r\n        if(key === \"children\"){\r\n            continue\r\n        }else if(key === \"style\"){\r\n            let styleObject = newProps[key]\r\n            for(let item in styleObject){\r\n                //给真实dom添加样式\r\n                dom.style[key] = styleObject[item]\r\n            }\r\n        }else if(key.startsWith(\"on\")){     //说明是绑定的事件\r\n            dom[key.toLocaleLowerCase()] = newProps[key]\r\n        }else{\r\n            dom[key] = newProps[key]\r\n        }\r\n    }\r\n\r\n    if(oldProps){           //更新处理。如果旧的属性在新的属性中不存在，那么就删除\r\n        for(let key in oldProps){\r\n            if(!newProps[key])  delete oldProps[key]\r\n        }\r\n    }\r\n}\r\n\r\n//处理  children\r\nfunction handleChildren(dom, children){   \r\n    if(typeof children ==='object' &&children.type){\r\n        mount(children,dom)\r\n    }if( Array.isArray(children)){\r\n        children.forEach( item=> mount(item, dom))\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst ReactDOM={\r\n    render\r\n}\r\nexport default ReactDOM"
        }
    ]
}